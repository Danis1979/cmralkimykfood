generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum OrderStatus {
  BORRADOR
  CONFIRMADO
  FACTURADO
  ENTREGADO
  CERRADO
  CANCELADO
}

enum SaleStatus {
  BORRADOR
  EMITIDA
  ANULADA
  CERRADA
}

enum PaymentMethod {
  Contado
  Transferencia
  Cheque
  CuentaCorriente
}

enum InvoiceType {
  A
  B
}

enum MoveDirection {
  IN
  OUT
}

enum ReservationStatus {
  ACTIVA
  EXPIRADA
  CANCELADA
  CONSUMIDA
}

enum ProductionStatus {
  PLANIFICADA
  EN_PROCESO
  CERRADA
  ANULADA
}

enum ChequeType {
  recibido
  emitido
}

enum ChequeStatus {
  RECIBIDO
  DEPOSITADO
  ACREDITADO
  VENDIDO
  RECHAZADO
  EMITIDO
  ENTREGADO
  DEBITADO
}

enum LedgerAccount {
  Caja
  Banco
  ChequesRecibidos
  ChequesEmitidos
}

enum LedgerType {
  DEBE
  HABER
}

enum DocStatus {
  Pendiente
  Cobrado
  Vencido
  Pagado
}

// Modelos
model Product {
  id        String   @id @default(uuid())
  sku       String   @unique
  name      String
  type      String
  uom       String
  costStd   Decimal? @db.Decimal(12, 2)
  priceList Decimal? @db.Decimal(12, 2)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems     OrderItem[]
  saleItems      SaleItem[]
  purchaseItems  PurchaseItem[]
  inventoryMoves InventoryMove[]
  stockRes       StockReservation[]
  poInputs       PoInput[]
  poOutputs      PoOutput[]

  recipesAsProduct   Recipe[] @relation("ProductRecipeProduct")
  recipesAsComponent Recipe[] @relation("ProductRecipeComponent")
}

model Client {
  id           String   @id @default(uuid())
  name         String
  cuit         String?
  address      String?
  paymentTerms String?
  priceList    String?
  email        String?
  phone        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders      Order[]
  sales       Sale[]
  receivables Receivable[]
}

model Supplier {
  id        String   @id @default(uuid())
  name      String
  cuit      String?
  address   String?
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchases Purchase[]
  payables  Payable[]
}

model Order {
  id        String      @id @default(uuid())
  clientId  String
  client    Client      @relation(fields: [clientId], references: [id])
  date      DateTime    @default(now())
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  items        OrderItem[]
  reservations StockReservation[]
  sales        Sale[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  qty       Int
  price     Decimal? @db.Decimal(12, 2)
}

model Sale {
  id          String        @id @default(uuid())
  orderId     String?
  order       Order?        @relation(fields: [orderId], references: [id])
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id])
  date        DateTime      @default(now())
  status      SaleStatus
  pm          PaymentMethod
  invoiceType InvoiceType?
  cae         String?
  caeVto      DateTime?
  subtotal    Decimal       @db.Decimal(12, 2)
  iva         Decimal       @db.Decimal(12, 2)
  total       Decimal       @db.Decimal(12, 2)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  items      SaleItem[]
  receivable Receivable?
  cheques    Cheque[]
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  qty       Int
  price     Decimal @db.Decimal(12, 2)
}

model Receivable {
  id        String    @id @default(uuid())
  saleId    String    @unique
  sale      Sale      @relation(fields: [saleId], references: [id])
  clientId  String
  client    Client    @relation(fields: [clientId], references: [id])
  dueDate   DateTime
  balance   Decimal   @db.Decimal(12, 2)
  status    DocStatus
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Purchase {
  id         String        @id @default(uuid())
  supplierId String
  supplier   Supplier      @relation(fields: [supplierId], references: [id])
  date       DateTime      @default(now())
  status     String?
  total      Decimal       @db.Decimal(12, 2)
  pm         PaymentMethod
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  items   PurchaseItem[]
  payable Payable?
  cheques Cheque[]
}

model PurchaseItem {
  id         String   @id @default(uuid())
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  qty        Int
  price      Decimal  @db.Decimal(12, 2)
}

model Payable {
  id         String    @id @default(uuid())
  purchaseId String    @unique
  purchase   Purchase  @relation(fields: [purchaseId], references: [id])
  supplierId String
  supplier   Supplier  @relation(fields: [supplierId], references: [id])
  dueDate    DateTime
  balance    Decimal   @db.Decimal(12, 2)
  status     DocStatus
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Cheque {
  id         String       @id @default(uuid())
  type       ChequeType
  bank       String?
  number     String?
  issueDate  DateTime?
  payDate    DateTime?
  amount     Decimal      @db.Decimal(12, 2)
  status     ChequeStatus
  refType    String?
  refId      String?
  saleId     String?
  sale       Sale?        @relation(fields: [saleId], references: [id])
  purchaseId String?
  purchase   Purchase?    @relation(fields: [purchaseId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model InventoryMove {
  id           String        @id @default(uuid())
  date         DateTime      @default(now())
  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  qty          Int
  direction    MoveDirection
  reason       String
  refType      String?
  refId        String?
  locationFrom String?
  locationTo   String?
  onHandAfter  Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model StockReservation {
  id        String            @id @default(uuid())
  orderId   String
  order     Order             @relation(fields: [orderId], references: [id])
  productId String
  product   Product           @relation(fields: [productId], references: [id])
  qty       Int
  expiresAt DateTime?
  status    ReservationStatus
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model ProductionOrder {
  id        String           @id @default(uuid())
  date      DateTime         @default(now())
  status    ProductionStatus
  batch     String?
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  inputs  PoInput[]
  outputs PoOutput[]
}

model PoInput {
  id        String          @id @default(uuid())
  poId      String
  po        ProductionOrder @relation(fields: [poId], references: [id])
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  qty       Int
}

model PoOutput {
  id        String          @id @default(uuid())
  poId      String
  po        ProductionOrder @relation(fields: [poId], references: [id])
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  qtyOk     Int
  qtyMerma  Int?            @default(0)
}

model LedgerEntry {
  id          String        @id @default(uuid())
  date        DateTime      @default(now())
  account     LedgerAccount
  type        LedgerType
  amount      Decimal       @db.Decimal(14, 2)
  currency    String        @default("ARS")
  refType     String?
  refId       String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Recipe {
  id          String  @id @default(uuid())
  productId   String
  componentId String
  qtyPerUnit  Decimal @db.Decimal(12, 4)

  product   Product @relation("ProductRecipeProduct", fields: [productId], references: [id])
  component Product @relation("ProductRecipeComponent", fields: [componentId], references: [id])

  @@unique([productId, componentId])
}
