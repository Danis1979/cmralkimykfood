<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8"/>
  <title>CMR Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <style>
    body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu; margin:20px; color:#222}
    h1{margin:0 0 16px}
    .row{display:flex; gap:16px; flex-wrap:wrap; margin-bottom:12px}
    .card{border:1px solid #e5e7eb; border-radius:12px; padding:14px; flex:1; min-width:300px; background:#fff}
    label{font-size:12px; color:#555; display:block; margin-bottom:6px}
    input,select,button{padding:8px; border-radius:8px; border:1px solid #d1d5db}
    button{cursor:pointer}
    table{border-collapse:collapse; width:100%; font-size:12px}
    th,td{border:1px solid #eee; padding:6px; text-align:left}
    th{background:#f9fafb}
    .actions{display:flex; gap:8px; align-items:end}
    .muted{color:#666; font-size:12px}
    .sum{font-weight:600}
    .grid{display:grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); gap:16px}
  </style>
</head>
<body>
  <h1>CMR Dashboard</h1>

  <div class="row">
    <div class="card">
      <div class="row">
        <div>
          <label>Base URL</label>
          <input id="baseUrl" placeholder="http://localhost:3000" style="width:260px">
        </div>
        <div>
          <label>API Key</label>
          <input id="apiKey" placeholder="x-api-key" style="width:220px">
        </div>
        <div class="actions">
          <button id="btnPing">Probar /health</button>
          <span id="pingOut" class="muted"></span>
        </div>
      </div>
      <div class="muted">Se guardan en localStorage.</div>
    </div>
  </div>

  <div class="grid">
    <!-- ORDERS -->
    <div class="card">
      <h3>Orders</h3>
      <div class="row">
        <div><label>Status</label>
          <select id="ord_status">
            <option value="">(todos)</option>
            <option>CONFIRMADO</option>
            <option>ENTREGADO</option>
            <option>CANCELADO</option>
            <option>BORRADOR</option>
          </select>
        </div>
        <div><label>Cliente (email)</label><input id="ord_client" placeholder="demo@cliente.com"></div>
        <div><label>Desde</label><input id="ord_from" type="date"></div>
        <div><label>Hasta</label><input id="ord_to" type="date"></div>
        <div class="actions">
          <button id="btnOrders">Buscar</button>
        </div>
      </div>
      <div class="muted" id="ord_info"></div>
      <div style="max-height:260px; overflow:auto">
        <table id="ord_tbl"><thead></thead><tbody></tbody></table>
      </div>
    </div>

    <!-- CHEQUES -->
    <div class="card">
      <h3>Cheques</h3>
      <div class="row">
        <div><label>Tipo</label>
          <select id="chq_type">
            <option value="">(todos)</option>
            <option value="recibido">recibido</option>
            <option value="emitido">emitido</option>
          </select>
        </div>
        <div><label>Status</label>
          <select id="chq_status">
            <option value="">(todos)</option>
            <option>RECIBIDO</option><option>DEPOSITADO</option><option>ACREDITADO</option>
            <option>EMITIDO</option><option>ENTREGADO</option><option>DEBITADO</option>
          </select>
        </div>
        <div><label>Vence desde</label><input id="chq_due_from" type="date"></div>
        <div><label>Vence hasta</label><input id="chq_due_to" type="date"></div>
        <div class="actions">
          <button id="btnCheques">Buscar</button>
        </div>
      </div>
      <div class="muted" id="chq_info"></div>
      <div style="max-height:260px; overflow:auto">
        <table id="chq_tbl"><thead></thead><tbody></tbody></table>
      </div>
    </div>

    <!-- RECEIVABLES -->
    <div class="card">
      <h3>Cuentas por Cobrar</h3>
      <div class="row">
        <div><label>Status</label>
          <select id="rcv_status">
            <option value="">(todos)</option>
            <option>Pendiente</option><option>Vencido</option><option>Pagado</option>
          </select>
        </div>
        <div><label>Cliente (email)</label><input id="rcv_client" placeholder="demo@cliente.com"></div>
        <div><label>Vence desde</label><input id="rcv_due_from" type="date"></div>
        <div><label>Vence hasta</label><input id="rcv_due_to" type="date"></div>
        <div class="actions">
          <button id="btnReceivables">Buscar</button>
        </div>
      </div>
      <div class="muted" id="rcv_info"></div>
      <div style="max-height:260px; overflow:auto">
        <table id="rcv_tbl"><thead></thead><tbody></tbody></table>
      </div>
    </div>
  </div>

  <script>
    // --- helpers ---
    const K_API="cmr_api_key", K_BASE="cmr_base_url";
    function el(id){ return document.getElementById(id); }
    function base(){ return (el('baseUrl').value || 'http://localhost:3000').replace(/\/+$/,''); }
    function headers(){
      const h={'Content-Type':'application/json'};
      const key=(el('apiKey').value||'').trim();
      if(key) h['x-api-key']=key;
      return h;
    }
    async function get(path){
      const res = await fetch(base()+path,{headers:headers()});
      if(!res.ok){ throw new Error(res.status+' '+res.statusText+': '+(await res.text())); }
      return res.json();
    }
    function setTable(tblId, cols, rows){
      const thead = el(tblId).querySelector('thead');
      const tbody = el(tblId).querySelector('tbody');
      thead.innerHTML = '<tr>' + cols.map(c=>'<th>'+c+'</th>').join('') + '</tr>';
      tbody.innerHTML = rows.map(r=>'<tr>' + r.map(c=>'<td>'+c+'</td>').join('') + '</tr>').join('');
    }
    function fmt(n){ return new Intl.NumberFormat('es-AR', {maximumFractionDigits:2}).format(n||0); }
    function iso(d){ return d ? new Date(d).toLocaleString() : ''; }

    // persistencia
    document.addEventListener('DOMContentLoaded', ()=>{
      el('apiKey').value = localStorage.getItem(K_API)||'';
      el('baseUrl').value = localStorage.getItem(K_BASE)||'http://localhost:3000';
      el('apiKey').addEventListener('input', ()=>localStorage.setItem(K_API, el('apiKey').value));
      el('baseUrl').addEventListener('input', ()=>localStorage.setItem(K_BASE, el('baseUrl').value));
    });

    // ping
    el('btnPing').onclick = async ()=>{
      try { const j = await get('/health'); el('pingOut').textContent='OK '+j.time; }
      catch(e){ el('pingOut').textContent='ERROR '+e.message; }
    };

    // Orders
    el('btnOrders').onclick = async ()=>{
      const params = new URLSearchParams();
      if(el('ord_status').value) params.set('status', el('ord_status').value);
      if(el('ord_client').value) params.set('clientEmail', el('ord_client').value);
      if(el('ord_from').value) params.set('date_from', el('ord_from').value);
      if(el('ord_to').value) params.set('date_to', el('ord_to').value);
      const j = await get('/orders-search' + (params.toString()?('?'+params.toString()):''));
      el('ord_info').innerHTML = `Total: <span class="sum">${j.total}</span>`;
      setTable('ord_tbl',
        ['Fecha','Cliente','Estado','Items','Subtotal'],
        j.items.map(o=>[
          iso(o.createdAt), o.client, o.status,
          o.items.map(i=>`${i.sku} x${i.qty}`).join('<br>'),
          fmt(o.subtotal)
        ]));
    };

    // Cheques
    el('btnCheques').onclick = async ()=>{
      const params = new URLSearchParams();
      if(el('chq_type').value) params.set('type', el('chq_type').value);
      if(el('chq_status').value) params.set('status', el('chq_status').value);
      if(el('chq_due_from').value) params.set('due_from', el('chq_due_from').value);
      if(el('chq_due_to').value) params.set('due_to', el('chq_due_to').value);
      const j = await get('/cheques-search' + (params.toString()?('?'+params.toString()):''));
      el('chq_info').innerHTML = `Recibidos: <span class="sum">${fmt(j.summary.recibidos)}</span> &nbsp;|&nbsp; Emitidos: <span class="sum">${fmt(j.summary.emitidos)}</span> &nbsp;|&nbsp; Neto: <span class="sum">${fmt(j.summary.neto)}</span>`;
      setTable('chq_tbl',
        ['Fecha','Tipo','Status','Banco','NÃºmero','Vencimiento','Importe'],
        j.items.map(c=>[
          iso(c.createdAt), c.type, c.status, c.bank||'', c.number||'', c.dueDate?new Date(c.dueDate).toLocaleDateString():'', fmt(c.amount)
        ]));
    };

    // Receivables
    el('btnReceivables').onclick = async ()=>{
      const params = new URLSearchParams();
      if(el('rcv_status').value) params.set('status', el('rcv_status').value);
      if(el('rcv_client').value) params.set('clientEmail', el('rcv_client').value);
      if(el('rcv_due_from').value) params.set('due_from', el('rcv_due_from').value);
      if(el('rcv_due_to').value) params.set('due_to', el('rcv_due_to').value);
      const j = await get('/receivables-search' + (params.toString()?('?'+params.toString()):''));
      el('rcv_info').innerHTML = `Pendiente: <span class="sum">${fmt(j.summary.pendiente)}</span> &nbsp;|&nbsp; Pagado: <span class="sum">${fmt(j.summary.pagado)}</span> &nbsp;|&nbsp; Vencido: <span class="sum">${fmt(j.summary.vencido)}</span>`;
      setTable('rcv_tbl',
        ['Fecha','Cliente','Estado','Vence','Saldo','Factura/Sale'],
        j.items.map(r=>[
          iso(r.createdAt), r.client, r.status, r.dueDate?new Date(r.dueDate).toLocaleDateString():'', fmt(r.balance), r.saleId||''
        ]));
    };
  </script>
</body>
</html>
<script id="summary-card">
(function(){
  function el(id){ return document.getElementById(id); }
  function mk(tag, attrs){ const n=document.createElement(tag); Object.entries(attrs||{}).forEach(([k,v])=>{ if(k==='innerHTML') n.innerHTML=v; else n.setAttribute(k,v); }); return n; }
  function fmt(n){ return new Intl.NumberFormat('es-AR',{maximumFractionDigits:2}).format(n||0); }
  function base(){ return (el('baseUrl').value || 'http://localhost:3000').replace(/\/+$/,''); }
  function headers(){ const h={'Content-Type':'application/json'}; const key=(el('apiKey').value||'').trim(); if(key) h['x-api-key']=key; return h; }
  async function get(path){ const res = await fetch(base()+path,{headers:headers()}); if(!res.ok) throw new Error(res.status+' '+res.statusText+': '+(await res.text())); return res.json(); }

  async function refreshSummary(){
    const sku = (el('sum_sku')?.value || 'PT-CAPRESE-001').trim();
    const days = parseInt(el('sum_days')?.value||'7',10) || 7;
    const today = new Date(); const to = new Date(today); to.setDate(to.getDate()+days);
    const iso = (d)=>d.toISOString().slice(0,10);

    const [ledger, rcv, chqRec7, chqEmi7, stock] = await Promise.all([
      get('/ledger/balances'),
      get('/receivables-search?status=Pendiente'),
      get('/cheques-search?type=recibido&due_from='+iso(today)+'&due_to='+iso(to)),
      get('/cheques-search?type=emitido&due_from='+iso(today)+'&due_to='+iso(to)),
      get('/inventory/stock?sku='+encodeURIComponent(sku))
    ]);

    const banco = (ledger?.totals?.Banco)||0;
    const rpend = (rcv?.summary?.pendiente)||0;
    const rec7 = (chqRec7?.summary?.recibidos)||0;
    const emi7 = (chqEmi7?.summary?.emitidos)||0;
    const net7 = rec7 - emi7;
    const st = stock?.items?.[0]||{};

    el('sum_banco').textContent = fmt(banco);
    el('sum_pend').textContent = fmt(rpend);
    el('sum_chq7').textContent = fmt(net7) + ' (+'+fmt(rec7)+' / -'+fmt(emi7)+')';
    el('sum_stock').textContent = (st.sku||sku)+': disp '+(st.available??'0')+' / onHand '+(st.onHand??'0');
  }

  document.addEventListener('DOMContentLoaded', function(){
    const grid = document.querySelector('.grid');
    const card = mk('div',{class:'card', id:'summaryCard', innerHTML:
      '<h3>Resumen rÃ¡pido</h3>'+
      '<div class="row">'+
        '<div><label>SKU PT clave</label><input id="sum_sku" value="PT-CAPRESE-001" style="width:200px"></div>'+
        '<div><label>Horizonte cheques (dÃ­as)</label><input id="sum_days" type="number" value="7" min="1" style="width:120px"></div>'+
        '<div class="actions"><button id="btnSum">Refrescar</button></div>'+
      '</div>'+
      '<div class="row">'+
        '<div><label>Banco</label><div class="sum" id="sum_banco">-</div></div>'+
        '<div><label>CxC pendiente</label><div class="sum" id="sum_pend">-</div></div>'+
        '<div><label>Cheques prÃ³ximos (neto)</label><div class="sum" id="sum_chq7">-</div></div>'+
        '<div><label>Stock PT</label><div class="sum" id="sum_stock">-</div></div>'+
      '</div>'
    });
    (grid && grid.parentNode) ? grid.parentNode.insertBefore(card, grid) : document.body.insertBefore(card, document.body.firstChild);
    document.getElementById('btnSum').addEventListener('click', ()=>refreshSummary().catch(e=>alert('Error resumen: '+e.message)));
    // primer refresco automÃ¡tico
    setTimeout(()=>refreshSummary().catch(()=>{}), 300);
  });
})();
</script>
<script id="csv-export">
(function(){
  function el(id){ return document.getElementById(id); }
  function toCsvVal(v){ if(v==null) return ''; const s=String(v).replace(/"/g,'""'); return `"${s}"`; }
  function downloadCSV(name, rows, headers){
    const headerLine = headers.map(toCsvVal).join(',');
    const lines = rows.map(r=> headers.map(h=>toCsvVal(r[h])).join(','));
    const csv = [headerLine].concat(lines).join('\n');
    const blob = new Blob([csv],{type:'text/csv;charset=utf-8;'});
    const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = name; a.click(); URL.revokeObjectURL(a.href);
  }
  function base(){ return (el('baseUrl').value || 'http://localhost:3000').replace(/\/+$/,''); }
  function headers(){
    const h={'Content-Type':'application/json'};
    const key=(el('apiKey').value||'').trim();
    if(key) h['x-api-key']=key;
    return h;
  }
  async function get(path){
    const res = await fetch(base()+path,{headers:headers()});
    if(!res.ok){ throw new Error(res.status+' '+res.statusText+': '+(await res.text())); }
    return res.json();
  }
  function iso(d){ return d ? new Date(d).toISOString() : ''; }

  async function exportOrdersCsv(){
    const params = new URLSearchParams();
    if(el('ord_status').value) params.set('status', el('ord_status').value);
    if(el('ord_client').value) params.set('clientEmail', el('ord_client').value);
    if(el('ord_from').value) params.set('date_from', el('ord_from').value);
    if(el('ord_to').value) params.set('date_to', el('ord_to').value);
    const j = await get('/orders-search' + (params.toString()?('?'+params.toString()):''));
    const rows=[];
    (j.items||[]).forEach(o=>{
      const common = { fecha: iso(o.createdAt), cliente: o.client, estado: o.status, subtotal: o.subtotal };
      (o.items||[]).forEach(it=>{
        rows.push({
          ...common,
          sku: it.sku, nombre: it.name, qty: it.qty, precio: it.price
        });
      });
    });
    downloadCSV('orders.csv', rows, ['fecha','cliente','estado','sku','nombre','qty','precio','subtotal']);
  }

  async function exportChequesCsv(){
    const params = new URLSearchParams();
    if(el('chq_type').value) params.set('type', el('chq_type').value);
    if(el('chq_status').value) params.set('status', el('chq_status').value);
    if(el('chq_due_from').value) params.set('due_from', el('chq_due_from').value);
    if(el('chq_due_to').value) params.set('due_to', el('chq_due_to').value);
    const j = await get('/cheques-search' + (params.toString()?('?'+params.toString()):''));
    const rows = (j.items||[]).map(c=>({
      fecha: iso(c.createdAt),
      tipo: c.type,
      status: c.status,
      banco: c.bank||'',
      numero: c.number||'',
      vencimiento: iso(c.dueDate),
      importe: c.amount
    }));
    downloadCSV('cheques.csv', rows, ['fecha','tipo','status','banco','numero','vencimiento','importe']);
  }

  async function exportReceivablesCsv(){
    const params = new URLSearchParams();
    if(el('rcv_status').value) params.set('status', el('rcv_status').value);
    if(el('rcv_client').value) params.set('clientEmail', el('rcv_client').value);
    if(el('rcv_due_from').value) params.set('due_from', el('rcv_due_from').value);
    if(el('rcv_due_to').value) params.set('due_to', el('rcv_due_to').value);
    const j = await get('/receivables-search' + (params.toString()?('?'+params.toString()):''));
    const rows = (j.items||[]).map(r=>({
      fecha: iso(r.createdAt),
      cliente: r.client,
      estado: r.status,
      vence: iso(r.dueDate),
      saldo: r.balance,
      saleId: r.saleId||''
    }));
    downloadCSV('receivables.csv', rows, ['fecha','cliente','estado','vence','saldo','saleId']);
  }

  function addBtn(afterId, text, id, onClick){
    const anchor = el(afterId);
    if(!anchor || !anchor.parentNode) return;
    const btn = document.createElement('button');
    btn.id = id; btn.textContent = text; btn.style.marginLeft='8px';
    anchor.parentNode.appendChild(btn);
    btn.addEventListener('click', ()=>onClick().catch(e=>alert('Error CSV: '+e.message)));
  }

  document.addEventListener('DOMContentLoaded', function(){
    addBtn('btnOrders', 'Exportar CSV', 'btnOrdersCsv', exportOrdersCsv);
    addBtn('btnCheques', 'Exportar CSV', 'btnChequesCsv', exportChequesCsv);
    addBtn('btnReceivables', 'Exportar CSV', 'btnReceivablesCsv', exportReceivablesCsv);
  });
})();
</script>
